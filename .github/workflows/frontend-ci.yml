name: Frontend CI Pipeline

on:
  push:
    branches:
      - dev # dev 브랜치에 푸시될 때 실행
      - main    # main 브랜치에 푸시될 때 실행 (release 후 merge 시)
  pull_request:
    branches:
      - dev # dev 브랜치로 PR 생성/업데이트 시 실행

jobs:
  build-frontend: # 프론트엔드 빌드 작업
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # GitHub 저장소 코드 체크아웃

      - name: Set up Node.js 18.x # Node.js 환경 설정 (Vite는 최신 Node.js 버전 권장, 18.x 또는 20.x 선택)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x' # Node.js 18 버전 사용
          # cache: 'npm' # npm 캐시 활성화 (의존성 설치 시간 단축)

      - name: Cache Node Modules # 의존성 캐시 스텝 추가
        uses: actions/cache@v4
        with:
          path: ~/.npm # npm 캐시 경로
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # package-lock.json 기준으로 캐시 키 생성
          restore-keys: | # 캐시가 없을 경우 유사한 이전 캐시를 복원 시도
            ${{ runner.os }}-node-

      - name: Install Dependencies # 의존성 설치 (캐시가 있으면 빠르게 건너뜀)
        run: npm install # package.json에 정의된 모든 의존성 설치

      # --- Lint 및 Prettier 검사 스텝 (CI에서 보류) ---
      # 나중에 팀에서 CI에 포함하기로 결정하면 주석을 풀고 사용 예정
      # - name: Run ESLint
      #   run: npm run lint
      # - name: Check Code Formatting (Prettier)
      #   run: npm run format:check

      - name: Run npm Audit #
        run: npm audit --audit-level=moderate || true # 보통 수준 이상의 취약점 경고, 빌드 실패 방지
        # '|| true'는 npm audit이 에러 코드를 반환해도 GitHub Actions 스텝이 실패로 처리되지 않도록 함
        # 즉, 경고만 받고 파이프라인은 계속 진행

      - name: Build Frontend # 프론트엔드 빌드 (Vite 프로젝트는 'npm run build'가 기본)
        env: # 환경 변수 주입
          VITE_APP_API_URL: ${{ secrets.VITE_APP_API_URL }}
          VITE_APP_WS_URL: ${{ secrets.VITE_APP_WS_URL }}
          VITE_ONE_SIGNAL_APP_ID: ${{ secrets.VITE_ONE_SIGNAL_APP_ID }}
        run: npm run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-output-${{ github.sha }} # 아티팩트 이름 (커밋 SHA 포함하여 고유하게)
          path: dist # 빌드 결과물이 생성되는 디렉토리 (Vite 기본은 'dist' 폴더)
          retention-days: 30 # 아티팩트 보관 기간 (선택 사항, 기본 90일, 7일로 단축 권장)

      # --- 선택 사항 ---
      # 프론트엔드에서 테스트 코드를 사용할 경우, 아래 주석을 해제(현재는 테스트 코드 없음)
      # - name: Run Frontend Tests
      #   run: npm test # 또는 'npm run test:ci' 등 프로젝트에 맞는 테스트 명령어 사용

      # --- Discord 알림 추가 ---
      - name: Send Discord Notification # Discord 알림
        if: always() # 빌드 성공, 실패, 취소와 상관없이 항상 실행
        uses: appleboy/discord-action@v1.2.0 # Discord 알림 액션 사용
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL_FE }} # GitHub Secrets에 저장된 웹훅 URL 사용
          username: 'GitHub Actions Frontend Bot' # Discord에 표시될 봇 이름
          avatar_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
          message: |
            **Frontend CI Pipeline Status**
            Repository: `${{ github.repository }}`
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Status: `${{ job.status }}`
            <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>
          # color: ${{ job.status == 'success' && '#00FF00' || job.status == 'failure' && '#FF0000' || '#FFFF00' }}